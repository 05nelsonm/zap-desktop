{"version":3,"file":"main.170f389c2b8fc100944e.bundle.js","sources":["webpack:///./renderer/reducers/network.js","webpack:///./renderer/components/UI/GlobalStyle.js"],"sourcesContent":["import { createSelector } from 'reselect'\nimport { grpcService } from 'workers'\nimport truncateNodePubkey from '@zap/utils/truncateNodePubkey'\n\n// ------------------------------------\n// Constants\n// ------------------------------------\nexport const GET_DESCRIBE_NETWORK = 'GET_DESCRIBE_NETWORK'\nexport const RECEIVE_DESCRIBE_NETWORK = 'RECEIVE_DESCRIBE_NETWORK'\nexport const UPDATE_NODE_DATA = 'UPDATE_NODE_DATA'\n\n// ------------------------------------\n// Helpers\n// ------------------------------------\n\nexport const getNodeDisplayName = node => {\n  if (node && node.alias && node.alias.length) {\n    return node.alias\n  }\n\n  return truncateNodePubkey(node.pub_key)\n}\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function updateNodeData(data) {\n  return {\n    type: UPDATE_NODE_DATA,\n    data,\n    // enable debounce for this action\n    debounce: {\n      wait: 2000,\n      maxWait: 5000,\n    },\n  }\n}\n\nexport function getDescribeNetwork() {\n  return {\n    type: GET_DESCRIBE_NETWORK,\n  }\n}\n\n// Send IPC event for describeNetwork\nexport const fetchDescribeNetwork = () => async dispatch => {\n  dispatch(getDescribeNetwork())\n  const grpc = await grpcService\n  const data = await grpc.services.Lightning.describeGraph()\n  dispatch(receiveDescribeNetwork(data))\n}\n\n// Receive IPC event for describeNetwork\nexport const receiveDescribeNetwork = ({ nodes }) => dispatch =>\n  dispatch({ type: RECEIVE_DESCRIBE_NETWORK, nodes })\n\n// ------------------------------------\n// Helpers\n// ------------------------------------\nconst mergeNodeUpdates = (state, nodeData) => {\n  const { nodes: originalNodes } = state\n  // Check if this is an existing node\n  const index = originalNodes.findIndex(item => item.pub_key === nodeData.identity_key)\n  // If we didn't find the node, add it to the end of the nodes list.\n  // Otherwise update existing.\n  const nodes =\n    index < 0\n      ? [...originalNodes, nodeData]\n      : [\n          ...originalNodes.slice(0, index),\n          {\n            ...originalNodes[index],\n            ...nodeData,\n            last_update: Math.round(new Date() / 1000),\n          },\n          ...originalNodes.slice(index + 1),\n        ]\n\n  return {\n    ...state,\n    nodes,\n  }\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [UPDATE_NODE_DATA]: (state, { data }) => data.flat().reduce(mergeNodeUpdates, state),\n  [GET_DESCRIBE_NETWORK]: state => ({ ...state, networkLoading: true }),\n  [RECEIVE_DESCRIBE_NETWORK]: (state, { nodes }) => ({\n    ...state,\n    networkLoading: false,\n    nodes,\n  }),\n}\n\nconst networkSelectors = {}\nconst nodesSelector = state => state.network.nodes\n\nnetworkSelectors.nodes = createSelector(\n  nodesSelector,\n  nodes => nodes\n)\n\nexport { networkSelectors }\n\n// ------------------------------------\n// Initial State\n// ------------------------------------\nconst initialState = {\n  networkLoading: false,\n  nodes: [],\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nexport default function activityReducer(state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n","import { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\nimport { rgba } from 'polished'\nimport { themeGet } from 'styled-system'\n\n/* eslint-disable max-len */\nconst GlobalStyle = createGlobalStyle`\n  /* stylelint-disable font-family-no-missing-generic-family-keyword  */\n  ${reset}\n\n  @font-face {\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Roboto Light'), local('Roboto-Light'), url(https://fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmSU5fBBc4AMP6lQ.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n  }\n  @font-face {\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n  }\n\n  html {\n    box-sizing: border-box;\n    height: 100%;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    height: 100%;\n    position: relative;\n    overflow: hidden;\n    -webkit-font-smoothing: antialiased;\n    -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\n    font-family: 'Roboto', Arial, Helvetica, sans-serif;\n    font-weight: 300;\n    font-size: 13px;\n  }\n\n  ::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: ${props => rgba(themeGet('colors.primaryText')(props), 0.12)};\n    box-shadow: inset 0 0 4px rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${props => rgba(themeGet('colors.primaryText')(props), 0.4)};\n    border-radius: 4px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n\n  pre {\n    font-family: \"Lucida Console\", Monaco, monospace;\n  }\n\n  #root {\n    height: 100%;\n  }\n\n  .element-show {\n    display: inherit;\n  }\n\n  .element-hide {\n    display: none;\n  }\n\n  /*\n   *Tooltips\n   */\n  [data-hint] {\n    position: relative;\n  }\n\n  [data-hint]::before,\n  [data-hint]::after {\n    position: absolute;\n    will-change: transform;\n    visibility: hidden;\n    opacity: 0;\n    z-index: 999;\n    pointer-events: none;\n    transition: 0.2s ease;\n    transition-delay: 0ms;\n  }\n\n  [data-hint]::before {\n    content: '';\n    position: absolute;\n    background: transparent;\n    border: 6px solid transparent;\n    z-index: 999;\n  }\n\n  [data-hint]::after {\n    content: attr(data-hint);\n    background: ${props => props.theme.colors.secondaryColor};\n    color: ${props => props.theme.colors.primaryText};\n    border: 1px solid ${props => props.theme.colors.gray};\n    border-radius: 3px;\n    max-width: 260px;\n    line-height: 1.4;\n    padding: 6px 10px;\n    word-wrap: break-word;\n    box-shadow: 0 3px 4px 0 rgba(30, 30, 30, 0.5), 0 2px 4px 0 rgba(0, 0, 0, 0.5);\n  }\n\n  [data-hint]:hover::before,\n  [data-hint]:hover::after {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  .hint--bottom::before,\n  .hint--bottom-left::before,\n  .hint--bottom-right::before {\n    border-bottom-color: #404040;\n  }\n\n  .hint--top::before,\n  .hint--top-left::before,\n  .hint--top-right::before {\n    border-top-color: #404040;\n  }\n\n  .hint--bottom::before {\n    margin-top: -12px;\n  }\n\n  .hint--bottom::after {\n    margin-left: -18px;\n  }\n\n  .hint--bottom::before,\n  .hint--bottom::after {\n    top: 100%;\n    left: 50%;\n  }\n\n  .hint--bottom:hover::after,\n  .hint--bottom:hover::before {\n    transform: translateY(8px);\n  }\n\n  .hint--top::before {\n    margin-bottom: -12px;\n  }\n\n  .hint--top::after {\n    margin-left: -18px;\n  }\n\n  .hint--top::before,\n  .hint--top::after {\n    bottom: 100%;\n    left: 50%;\n  }\n\n  .hint--top:hover::after,\n  .hint--top:hover::before {\n    transform: translateY(-8px);\n  }\n\n  .hint--top-left::before,\n  .hint--top-right::before {\n    margin-bottom: -12px;\n  }\n\n  .hint--top-left::after {\n    margin-right: -6px;\n  }\n\n  .hint--top-right::after {\n    margin-right: 6px;\n  }\n\n  .hint--top-left::before,\n  .hint--top-left::after {\n    bottom: 100%;\n    right: 12px;\n  }\n\n  .hint--top-right::before,\n  .hint--top-right::after {\n    bottom: 100%;\n    left: 12px;\n  }\n\n  .hint--top-left:hover::after,\n  .hint--top-left:hover::before,\n  .hint--top-right:hover::after,\n  .hint--top-right:hover::before {\n    transform: translateY(-8px);\n  }\n\n  .hint--bottom-left::before {\n    margin-top: -12px;\n  }\n\n  .hint--bottom-left::after {\n    margin-right: -6px;\n  }\n\n  .hint--bottom-left::before,\n  .hint--bottom-left::after {\n    top: 100%;\n    right: 12px;\n  }\n\n  .hint--bottom-left:hover::after,\n  .hint--bottom-left:hover::before {\n    transform: translateY(8px);\n  }\n\n  .hint--left::before {\n    margin-right: -12px;\n    margin-top: -6px;\n  }\n\n  .hint--left::after {\n    margin-right: -14px;\n  }\n\n  .hint--left::before,\n  .hint--left::after {\n    right: 100%;\n    bottom: 50%;\n  }\n\n  .hint--left:hover::after,\n  .hint--left:hover::before {\n    transform: translateX(-8px);\n  }\n\n  /*\n   *Generic spin animation.\n   */\n\n  @keyframes spin {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n\n`\n\nexport default GlobalStyle\n"],"mappings":"AAOA;;ACCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqJA","sourceRoot":""}