{"version":3,"file":"static/iframe.bb22ad8ff6fc73674e56.bundle.js","sources":["webpack:///./.storybook/config.js","webpack:///./app/components/UI/Button.js","webpack:///./app/components/UI/GlobalStyle.js","webpack:///./app/components/UI/Spinner.js"],"sourcesContent":["import { addDecorator, configure, setAddon } from '@storybook/react'\nimport { withThemesProvider } from 'storybook-addon-styled-component-theme'\nimport { themes } from '@storybook/components'\nimport { withOptions } from '@storybook/addon-options'\nimport { setDefaults, withInfo } from '@storybook/addon-info'\nimport { withBackgrounds } from '@storybook/addon-backgrounds'\nimport { dark, light } from 'themes'\nimport chaptersAddon from 'react-storybook-addon-chapters'\n\nimport React from 'react'\nimport GlobalStyle from 'components/UI/GlobalStyle'\n\n// Info\naddDecorator(withInfo({ inline: true }))\n\n// Chapters\nsetAddon(chaptersAddon)\n\n// Options\naddDecorator(\n  withOptions({\n    name: 'Zap Desktop',\n    url: 'https://ln-zap.github.io/zap-desktop',\n    theme: themes.dark,\n    addonPanelInRight: true\n  })\n)\n\n// Backgrounds\naddDecorator(\n  withBackgrounds([\n    { name: 'dark', value: dark.colors.darkestBackground, default: true },\n    { name: 'light', value: light.colors.darkestBackground }\n  ])\n)\n\n// Zap Global style.\naddDecorator(story => (\n  <React.Fragment>\n    <GlobalStyle />\n    {story()}\n  </React.Fragment>\n))\n\n// Zap Themes.\nconst zapThemes = [dark, light]\naddDecorator(withThemesProvider(zapThemes))\n\n// automatically import all files ending in *.stories.js\nconst req = require.context('../stories', true, /.stories.js$/)\nfunction loadStories() {\n  req.keys().forEach(filename => req(filename))\n}\n\nconfigure(loadStories, module)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { Button as BaseButton, Flex, Text } from 'rebass'\nimport Spinner from './Spinner'\n\nconst Wrapper = styled(BaseButton)`\n  transition: all 0.25s;\n  outline: none;\n  border-radius: 5;\n  font-weight: normal;\n  line-height: '18px';\n  &:focus {\n    box-shadow: 0 0 3px ${props => props.theme.lightningOrange};\n  }\n  &:disabled {\n    opacity: 0.5;\n  }\n  &:hover:enabled {\n    cursor: pointer;\n  }\n`\n\n/**\n * @render react\n * @name Button\n * @example\n * <Button><Basic button</Button>\n */\nconst Button = props => {\n  const { children, processing, size } = props\n  const sizes = {\n    small: {\n      x: 3,\n      y: 2\n    },\n    large: {\n      x: 5,\n      y: 3\n    }\n  }\n  return (\n    <Wrapper px={sizes[size]['x']} py={sizes[size]['y']} {...props}>\n      <Flex>\n        {processing && <Spinner size=\"2em\" mr=\"0.5em\" />}\n        <Text fontFamily=\"sans\">{children}</Text>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nButton.displayName = 'Button'\nButton.defaultProps = {\n  processing: false,\n  size: 'small',\n  variant: 'normal'\n}\nButton.propTypes = {\n  processing: PropTypes.bool,\n  size: PropTypes.string,\n  variant: PropTypes.string\n}\n\nexport default Button\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 300;\n    src: local('Roboto Light'), local('Roboto-Light'), url(https://fonts.gstatic.com/s/roboto/v15/Fl4y0QdOxyyTHEGMXX8kcaCWcynf_cDxXwCLxiixG1c.ttf) format('truetype');\n  }\n\n  * { box-sizing: border-box; }\n\n  body {\n    margin: 0;\n    font-family: 'Roboto Light', 'Roboto', Arial, Helvetica, sans-serif;\n    font-size: 13px;\n    line-height: 1.4;\n    -webkit-font-smoothing: antialiased;\n  }\n`\n\nexport default GlobalStyle\n","import styled, { keyframes } from 'styled-components'\nimport { Card } from 'rebass'\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\n/**\n * @render react\n * @name Spinner\n * @example\n * <Spinner />\n */\nconst Spinner = styled(Card)`\n  border: 1px solid rgba(235, 184, 100, 0.1);\n  border-left-color: rgba(235, 184, 100, 0.6);\n  display: inline-block;\n  animation: ${rotate360} 1s linear infinite;\n  }\n`\n\nSpinner.displayName = 'Spinner'\nSpinner.defaultProps = {\n  borderRadius: 999,\n  width: '1em',\n  css: {\n    height: '1em'\n  }\n}\n\nexport default Spinner\n"],"mappings":"AAAA;;;;;;;ACaA;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;ACvBA;;;;AClBA;;;;;;;;;AAuBA","sourceRoot":""}